**How to use git**

git every day is also a great resource available at: https://git-scm.com/docs along with github for poets by dan shiffman

**Checking that git is installed and working**

git status -> make sure that git is installed and functional 
git remote -v -> show verbose information on the remote
git config --global user.name "ahscodingclub" -> set your username
git config --global user.email "jake.sauter3@gmail.com" -> set your email


**Creating or cloning a repository to local machine**
 
  git clone https://github.com/ahscodingclub/Notes.git -> clone a repository to your directory 
  git init -> make your directory a git repository
git status
git diff <filename> -- shows the differences of the file that have been tracked     
                        versus the current version of the file
    git remote add origin <https//...> -> add a repository thats made using init locally
    git remote set-url origin https://github.com/jakesauter/lateralization_project.git -- set the origin
                                to a new url (really quick and easy to change repo-hosts)
    git push -u origin master 
git add <filename> -> add a file to be tracked in your repository
git add . -- adds all the changes and new files to be committed
git add * -- add all files to be commited 
git commit -a -m '<comment>' -> add all untracked files and changes and commit

git commit -m '<comment>' -- add a commit message to all items previously added
                             to staging area

**Pushing and pulling to the repository**

git push origin <remote> master <branch> -> push changed from the clone to the master branch
                -f -- with force, will not stop for local repo not being up to date and push anyway
git pull origin <remote> master <branch> -> push changed from the clone to the master branch
git reset --soft HEAD^ -> remove the last commit but keep the changes to the file
git reset --hard HEAD^ -> this line removes the last commit and reverts the changes to the file
git checkout -b myBranch -> create and move to that new branch

git rm -r --cached .  -- remove all files from being tracked
git rm <filename> -- to untrack and remove a file from a git repository
git log -- history of commits
git push -u origin master -- '-u' remember my credentials next time

by using the -a switch with the commit command to automatically "add" changes from 
all known files (i.e. all files that are already listed in the index) and to automatically 
"rm" files in the index that have been removed from the working tree, and then perform the actual commit;

**Using github pages**

"gh-pages" then settings->default branch-> gh-pages and delete the master branch

**Extra git notes**

**When pushing file changes, DO NOT <git add *> and put the specific descrition of a single file
change in the commit message, ideally different commits should be used, or if updating multiple
files as apart of one approved change, and nothing else has been changed, <git add *> is acceptable

A cool idea is to keep a list of file names in the terminal and pass this to git update if I am 
working on different specific file structures in the same project that requires frequent updating

this would be achieved by:   list=(git.txt dot.txt);for file in ${list[*]};do git add $file;done
