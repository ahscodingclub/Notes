** How to properly use pip

python -m pip install --user --upgrade pip

** from __future__ import division

	An example is

	from __future__ import division -- don't need this in python 3, only 2.7
	print 8/7  # prints 1.1428571428571428
	print 8//7 # prints 1

	Without the __future__ , both print statements would print 1.

	The internal difference is that without that import, / is mapped to the __div__() method, while 
	with it, __truediv__() is used. (In any case, // calls __floordiv__().)

	A future statement is a directive to the compiler that a particular module should be compiled 
	using syntax or semantics that will be available in a specified future release of Python. The 
	future statement is intended to ease migration to future versions of Python that introduce 
	incompatible changes to the language. It allows use of the new features on a per-module basis 
	before the release in which the feature becomes standard.

** function definitions

  When defining a parametric function, parameters can be preconditioned as so the parameter is
  not required, however can be changed for customized use:

    def func(x, y, z="val")
      
    function can be used in two ways  

    func(x,y)
    func(x,y,z="my custom val")
when functions use the same variable names as global variables, then whatever value the function
assigns the variable to be will have no affect on the global variable value, as the scope of the 
local variable is strictly the function

this is where the use of global is shown, if one is programming in a function and wants to reference
the global variable in the function, they can use the global keyword 

  x = 2

  def example():
      global x
      x+=2
      print(x)

  print(x)

  >>4
  >>4



** easy way to set up quick python environment in command line:

  screen

  ctrl-a n

  ctrl-a shft-s

  ctrl-a tab

  ctrl-a :resize -v 10% -- for bottom window

** running code in interpreter

exec(open("midpoint_method.py").read()) will do the same, but seems more reliable as the import seems not to track changes in the file once the interpreter is started

from file import *, will import all of the functions and run any executable lines

import os
os.system("clear") to send message to terminal to clear

** Numpy

import numpy as np

np.arange(10) -- produces a numpy array from 0 to 9 of length 10

**
